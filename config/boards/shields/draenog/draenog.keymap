/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "./helper.h"

ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)

ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_BEHAVIOR(question_morph, mod_morph,
    bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    
)
    
/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};


/ {
    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&kp ENTER>;
        };
        combo_backspace {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp BACKSPACE>;
        };
        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <11 12 13>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp TAB>;
        };
    };
};


    
    

/ {
        keymap {
                compatible = "zmk,keymap";
                default_layer {
                        bindings = <
   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I        &kp O      &kp P
   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K        &kp L      &kp APOSTROPHE
   &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &comma_morph &dot_morph &question_morph
                 &mo 1 &kp SPACE   &kp LSHIFT &mo 2
                        >;
                };
                
                sym_layer {
                        bindings = <
   &none &kp PIPE &kp LBKT  &kp RBKT &kp GRAVE   &kp UNDER &kp AT &kp HASH &kp LA(N3) &kp DOLLAR
   &none &kp AMPS &kp LPAR  &kp RPAR &kp TILDE   &kp MINUS &kp PLUS &kp STAR  &kp FSLH  &kp CARET
   &none &none &kp LBRC  &kp RBRC &kp BSLH    &kp LT    &kp GT   &kp EQUAL &kp PRCNT &none
                         &trans   &trans      &trans  &trans
                        >;
                };
                
                modnav_layer {
                        bindings = <
   &bt BT_SEL 0 &none    &kp UP    &none     &none   &none &none    &none      &none     &none
   &bt BT_SEL 1 &kp LEFT &kp DOWN  &kp RIGHT &none   &none &sk LCMD &sk LCTRL  &sk LALT  &sk LSHFT
   &bt BT_CLR &none    &kp LG(C) &kp LG(V)    &none   &none &none    &none      &none     &none
                  &trans      &trans   &trans  &trans
                        >;
                };
                
                num_layer {
                        bindings = <
   &none &none &none &none &none   &none &kp N4    &kp N5      &kp N6     &none
   &none &none &none &none &none   &kp N0 &kp N1 &kp N2  &kp N3  &none 
   &none &none &none &none &none   &none &kp N7    &kp N8      &kp N9     &none
                  &trans   &trans   &trans  &trans
                        >;
                };
                
                
        };
    };